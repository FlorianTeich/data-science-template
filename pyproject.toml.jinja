[project]
name = "{{ project_name }}"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">={{ python_version }}"
dependencies = []

[tool.setuptools.packages.find]
where = ["."]

[project.optional-dependencies]
plotting = [
    "matplotlib",
    "seaborn",
    "plotly",
]
datascience = [
    "jupyter",
    "numpy",
    "pyarrow",
    "fastparquet",
    "pandas",
    "polars",
    "mlflow",
    "scikit-learn",
    "skrub",
    "optuna",
]
datascience_misc = [
    "ydata-profiling",
    "networkx",
    "sktime",
    "streamlit",
    "pygwalker",
    "frouros",
    "pingouin",
    "sentence_transformers",
]
tools = [
  "rich",
  "click",
  "ruff",
  "uv",
  "ty",
  "pytest",
  "pytest-cov",
  "pre-commit",
  "mkdocs",
  "mkdocstrings-python",
  "mkdocs-material",
  "deptry",
  "cyclonedx-bom",
  "opentelemetry-distro",
  "python-dotenv",
]

[tool.ruff]
# Set the maximum line length to 88.
line-length = 88

[tool.ruff.lint]
extend-select = [
  "UP",  # pyupgrade
  "D",   # pydocstyle
  "ERA", # eradicate
  "S",   # flake8-bandit
  "B",   # flake8-bugbear
  "A",   # flake8-builtins
  "COM", # flake8-commas
  "C4",  # flake8-comprehensions
  "DTZ", # flake8-datetimez
  "FIX", # flake8-fixme
  "ISC", # flake8-implicit-string-concatenation
  "ICN", # flake8-import-conventions
  "LOG", # flake8-logging
  "G",   # flake8-logging-format
  "T20", # flake8-print
  "PT",  # flake8-pytest-style
  "RET", # flake8-return
  "SIM", # flake8-simplify
  "TID", # flake8-tidy-imports
  "TD",  # flake8-todos
  "ARG", # flake8-unused-arguments
  "PTH", # flake8-pathlib
  "I",   # isort
  "C90", # mccabe
  "NPY", # numpy
  "PD",  # pandas-vet
  "N",   # PEP8-naming
  "E",   # pycodestyle 
  "W",   # pycodestyle
  "F",   # pyflakes
  "PL",  # pylint 
  "FURB",# refurb
  "RUF", # ruff
  "TRY", # tryceratops
]

[tool.ruff.lint.pydocstyle]
convention = "google"